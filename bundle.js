(function (topojson,d3) {
  'use strict';

  const loadAndProcessData = () => 
    Promise
      .all([
        d3.tsv('https://unpkg.com/world-atlas@1.1.4/world/50m.tsv'),
        d3.json('https://unpkg.com/world-atlas@1.1.4/world/50m.json')
      ])
      .then(([tsvData, topoJSONdata]) => {
        const rowById = tsvData.reduce((accumulator, d) => {
          accumulator[d.iso_n3] = d;
          return accumulator;
        }, {});

        const countries = topojson.feature(topoJSONdata, topoJSONdata.objects.countries);

        countries.features.forEach(d => {
          Object.assign(d.properties, rowById[d.id]);
        });

        return countries;
      });

  const colorLegend = (selection, props) => {
    const {                      
      colorScale,                
      circleRadius,
      spacing,                   
      textOffset,
      backgroundRectWidth,
      onClick,
      selectedColorValue
    } = props;                   
    
    const backgroundRect = selection.selectAll('rect')
      .data([null]);             
    const n = colorScale.domain().length; 
    backgroundRect.enter().append('rect')
      .merge(backgroundRect)
        .attr('x', -circleRadius * 2)   
        .attr('y', -circleRadius * 2)   
        .attr('rx', circleRadius * 2)   
        .attr('width', backgroundRectWidth)
        .attr('height', spacing * n + circleRadius * 2) 
        .attr('fill', 'white')
        .attr('opacity', 0.8);

    const groups = selection.selectAll('.tick')
      .data(colorScale.domain());
    const groupsEnter = groups
      .enter().append('g')
        .attr('class', 'tick');
    groupsEnter
      .merge(groups)
        .attr('transform', (d, i) =>    
          `translate(0, ${i * spacing})`  
        )
        .attr('opacity', d =>
          (!selectedColorValue || d === selectedColorValue)
            ? 1
            : 0.2
        )
        .on('click', d => onClick(
          d === selectedColorValue
            ? null
            : d
        ));
    groups.exit().remove();
    
    groupsEnter.append('circle')
      .merge(groups.select('circle')) 
        .attr('r', circleRadius)
        .attr('fill', colorScale);      
    
    groupsEnter.append('text')
      .merge(groups.select('text'))   
        .text(d => d)
        .attr('dy', '0.32em')
        .attr('x', textOffset);
  };

  const projection = d3.geoNaturalEarth1();
  const pathGenerator = d3.geoPath().projection(projection);

  const choroplethMap = (selection, props) => {
    const {
      features,
      colorScale,
      colorValue,
      selectedColorValue
    } = props;
    
    console.log(features);
    
    const gUpdate = selection.selectAll('g').data([null]);
    const gEnter = gUpdate.enter().append('g');
    const g = gUpdate.merge(gEnter);
    
    gEnter
      .append('path')
        .attr('class', 'sphere')
        .attr('d', pathGenerator({type: 'Sphere'}))
      .merge(gUpdate.select('.sphere'))
        .attr('opacity', selectedColorValue ? 0.05 : 1);

    selection.call(d3.zoom().on('zoom', () => {
      g.attr('transform', d3.event.transform);
    }));
    
    const countryPaths = g.selectAll('.country')
      .data(features);
    const countryPathsEnter = countryPaths
      .enter().append('path')
        .attr('class', 'country');
    countryPaths
      .merge(countryPathsEnter)
        .attr('d', pathGenerator)
        .attr('fill', d => colorScale(colorValue(d)))
        .attr('opacity', d =>
          (!selectedColorValue || selectedColorValue === colorValue(d))
            ? 1
            : 0.1
        )
        .classed('highlighted', d =>
          selectedColorValue && selectedColorValue === colorValue(d)
        );
    
    countryPathsEnter.append('title')
        .text(d => d.properties.name + ': ' + colorValue(d));
  };

  const svg = d3.select('svg');
  const choroplethMapG = svg.append('g');
  const colorLegendG = svg.append('g')
      .attr('transform', `translate(40,310)`);

  const colorScale = d3.scaleOrdinal();

  // const colorValue = d => d.properties.income_grp;
  const colorValue = d => d.properties.economy;

  let selectedColorValue;
  let features;

  const onClick = d => {
    selectedColorValue = d;
    render();
  };

  loadAndProcessData().then(countries => {
    features = countries.features;
    render();
  });

  const render = () => {
    colorScale
      .domain(features.map(colorValue))
      .domain(colorScale.domain().sort().reverse())
      .range(d3.schemeSpectral[colorScale.domain().length]);
    
    colorLegendG.call(colorLegend, {
      colorScale,
      circleRadius: 8,
      spacing: 20,
      textOffset: 12,
      backgroundRectWidth: 235,
      onClick,
      selectedColorValue
    });
    
    choroplethMapG.call(choroplethMap, {
      features,
      colorScale,
      colorValue,
      selectedColorValue
    });
  };

}(topojson,d3));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbIi4uL2xvYWRBbmRQcm9jZXNzRGF0YS5qcyIsIi4uL2NvbG9yTGVnZW5kLmpzIiwiLi4vY2hvcm9wbGV0aE1hcC5qcyIsIi4uL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGZlYXR1cmUgfSBmcm9tICd0b3BvanNvbic7XG5pbXBvcnQgeyB0c3YsIGpzb24gfSBmcm9tICdkMyc7XG5leHBvcnQgY29uc3QgbG9hZEFuZFByb2Nlc3NEYXRhID0gKCkgPT4gXG4gIFByb21pc2VcbiAgICAuYWxsKFtcbiAgICAgIHRzdignaHR0cHM6Ly91bnBrZy5jb20vd29ybGQtYXRsYXNAMS4xLjQvd29ybGQvNTBtLnRzdicpLFxuICAgICAganNvbignaHR0cHM6Ly91bnBrZy5jb20vd29ybGQtYXRsYXNAMS4xLjQvd29ybGQvNTBtLmpzb24nKVxuICAgIF0pXG4gICAgLnRoZW4oKFt0c3ZEYXRhLCB0b3BvSlNPTmRhdGFdKSA9PiB7XG4gICAgICBjb25zdCByb3dCeUlkID0gdHN2RGF0YS5yZWR1Y2UoKGFjY3VtdWxhdG9yLCBkKSA9PiB7XG4gICAgICAgIGFjY3VtdWxhdG9yW2QuaXNvX24zXSA9IGQ7XG4gICAgICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgICAgIH0sIHt9KTtcblxuICAgICAgY29uc3QgY291bnRyaWVzID0gZmVhdHVyZSh0b3BvSlNPTmRhdGEsIHRvcG9KU09OZGF0YS5vYmplY3RzLmNvdW50cmllcyk7XG5cbiAgICAgIGNvdW50cmllcy5mZWF0dXJlcy5mb3JFYWNoKGQgPT4ge1xuICAgICAgICBPYmplY3QuYXNzaWduKGQucHJvcGVydGllcywgcm93QnlJZFtkLmlkXSk7XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIGNvdW50cmllcztcbiAgICB9KTsiLCJleHBvcnQgY29uc3QgY29sb3JMZWdlbmQgPSAoc2VsZWN0aW9uLCBwcm9wcykgPT4ge1xuICBjb25zdCB7ICAgICAgICAgICAgICAgICAgICAgIFxuICAgIGNvbG9yU2NhbGUsICAgICAgICAgICAgICAgIFxuICAgIGNpcmNsZVJhZGl1cyxcbiAgICBzcGFjaW5nLCAgICAgICAgICAgICAgICAgICBcbiAgICB0ZXh0T2Zmc2V0LFxuICAgIGJhY2tncm91bmRSZWN0V2lkdGgsXG4gICAgb25DbGljayxcbiAgICBzZWxlY3RlZENvbG9yVmFsdWVcbiAgfSA9IHByb3BzOyAgICAgICAgICAgICAgICAgICBcbiAgXG4gIGNvbnN0IGJhY2tncm91bmRSZWN0ID0gc2VsZWN0aW9uLnNlbGVjdEFsbCgncmVjdCcpXG4gICAgLmRhdGEoW251bGxdKTsgICAgICAgICAgICAgXG4gIGNvbnN0IG4gPSBjb2xvclNjYWxlLmRvbWFpbigpLmxlbmd0aDsgXG4gIGJhY2tncm91bmRSZWN0LmVudGVyKCkuYXBwZW5kKCdyZWN0JylcbiAgICAubWVyZ2UoYmFja2dyb3VuZFJlY3QpXG4gICAgICAuYXR0cigneCcsIC1jaXJjbGVSYWRpdXMgKiAyKSAgIFxuICAgICAgLmF0dHIoJ3knLCAtY2lyY2xlUmFkaXVzICogMikgICBcbiAgICAgIC5hdHRyKCdyeCcsIGNpcmNsZVJhZGl1cyAqIDIpICAgXG4gICAgICAuYXR0cignd2lkdGgnLCBiYWNrZ3JvdW5kUmVjdFdpZHRoKVxuICAgICAgLmF0dHIoJ2hlaWdodCcsIHNwYWNpbmcgKiBuICsgY2lyY2xlUmFkaXVzICogMikgXG4gICAgICAuYXR0cignZmlsbCcsICd3aGl0ZScpXG4gICAgICAuYXR0cignb3BhY2l0eScsIDAuOCk7XG5cbiAgY29uc3QgZ3JvdXBzID0gc2VsZWN0aW9uLnNlbGVjdEFsbCgnLnRpY2snKVxuICAgIC5kYXRhKGNvbG9yU2NhbGUuZG9tYWluKCkpO1xuICBjb25zdCBncm91cHNFbnRlciA9IGdyb3Vwc1xuICAgIC5lbnRlcigpLmFwcGVuZCgnZycpXG4gICAgICAuYXR0cignY2xhc3MnLCAndGljaycpO1xuICBncm91cHNFbnRlclxuICAgIC5tZXJnZShncm91cHMpXG4gICAgICAuYXR0cigndHJhbnNmb3JtJywgKGQsIGkpID0+ICAgIFxuICAgICAgICBgdHJhbnNsYXRlKDAsICR7aSAqIHNwYWNpbmd9KWAgIFxuICAgICAgKVxuICAgICAgLmF0dHIoJ29wYWNpdHknLCBkID0+XG4gICAgICAgICghc2VsZWN0ZWRDb2xvclZhbHVlIHx8IGQgPT09IHNlbGVjdGVkQ29sb3JWYWx1ZSlcbiAgICAgICAgICA/IDFcbiAgICAgICAgICA6IDAuMlxuICAgICAgKVxuICAgICAgLm9uKCdjbGljaycsIGQgPT4gb25DbGljayhcbiAgICAgICAgZCA9PT0gc2VsZWN0ZWRDb2xvclZhbHVlXG4gICAgICAgICAgPyBudWxsXG4gICAgICAgICAgOiBkXG4gICAgICApKTtcbiAgZ3JvdXBzLmV4aXQoKS5yZW1vdmUoKTtcbiAgXG4gIGdyb3Vwc0VudGVyLmFwcGVuZCgnY2lyY2xlJylcbiAgICAubWVyZ2UoZ3JvdXBzLnNlbGVjdCgnY2lyY2xlJykpIFxuICAgICAgLmF0dHIoJ3InLCBjaXJjbGVSYWRpdXMpXG4gICAgICAuYXR0cignZmlsbCcsIGNvbG9yU2NhbGUpOyAgICAgIFxuICBcbiAgZ3JvdXBzRW50ZXIuYXBwZW5kKCd0ZXh0JylcbiAgICAubWVyZ2UoZ3JvdXBzLnNlbGVjdCgndGV4dCcpKSAgIFxuICAgICAgLnRleHQoZCA9PiBkKVxuICAgICAgLmF0dHIoJ2R5JywgJzAuMzJlbScpXG4gICAgICAuYXR0cigneCcsIHRleHRPZmZzZXQpO1xufVxuIiwiaW1wb3J0IHtcbiAgZ2VvUGF0aCxcbiAgZ2VvTmF0dXJhbEVhcnRoMSxcbiAgem9vbSxcbiAgZXZlbnRcbn0gZnJvbSAnZDMnO1xuXG5jb25zdCBwcm9qZWN0aW9uID0gZ2VvTmF0dXJhbEVhcnRoMSgpO1xuY29uc3QgcGF0aEdlbmVyYXRvciA9IGdlb1BhdGgoKS5wcm9qZWN0aW9uKHByb2plY3Rpb24pO1xuXG5leHBvcnQgY29uc3QgY2hvcm9wbGV0aE1hcCA9IChzZWxlY3Rpb24sIHByb3BzKSA9PiB7XG4gIGNvbnN0IHtcbiAgICBmZWF0dXJlcyxcbiAgICBjb2xvclNjYWxlLFxuICAgIGNvbG9yVmFsdWUsXG4gICAgc2VsZWN0ZWRDb2xvclZhbHVlXG4gIH0gPSBwcm9wcztcbiAgXG4gIGNvbnNvbGUubG9nKGZlYXR1cmVzKTtcbiAgXG4gIGNvbnN0IGdVcGRhdGUgPSBzZWxlY3Rpb24uc2VsZWN0QWxsKCdnJykuZGF0YShbbnVsbF0pO1xuICBjb25zdCBnRW50ZXIgPSBnVXBkYXRlLmVudGVyKCkuYXBwZW5kKCdnJyk7XG4gIGNvbnN0IGcgPSBnVXBkYXRlLm1lcmdlKGdFbnRlcik7XG4gIFxuICBnRW50ZXJcbiAgICAuYXBwZW5kKCdwYXRoJylcbiAgICAgIC5hdHRyKCdjbGFzcycsICdzcGhlcmUnKVxuICAgICAgLmF0dHIoJ2QnLCBwYXRoR2VuZXJhdG9yKHt0eXBlOiAnU3BoZXJlJ30pKVxuICAgIC5tZXJnZShnVXBkYXRlLnNlbGVjdCgnLnNwaGVyZScpKVxuICAgICAgLmF0dHIoJ29wYWNpdHknLCBzZWxlY3RlZENvbG9yVmFsdWUgPyAwLjA1IDogMSk7XG5cbiAgc2VsZWN0aW9uLmNhbGwoem9vbSgpLm9uKCd6b29tJywgKCkgPT4ge1xuICAgIGcuYXR0cigndHJhbnNmb3JtJywgZXZlbnQudHJhbnNmb3JtKTtcbiAgfSkpO1xuICBcbiAgY29uc3QgY291bnRyeVBhdGhzID0gZy5zZWxlY3RBbGwoJy5jb3VudHJ5JylcbiAgICAuZGF0YShmZWF0dXJlcyk7XG4gIGNvbnN0IGNvdW50cnlQYXRoc0VudGVyID0gY291bnRyeVBhdGhzXG4gICAgLmVudGVyKCkuYXBwZW5kKCdwYXRoJylcbiAgICAgIC5hdHRyKCdjbGFzcycsICdjb3VudHJ5Jyk7XG4gIGNvdW50cnlQYXRoc1xuICAgIC5tZXJnZShjb3VudHJ5UGF0aHNFbnRlcilcbiAgICAgIC5hdHRyKCdkJywgcGF0aEdlbmVyYXRvcilcbiAgICAgIC5hdHRyKCdmaWxsJywgZCA9PiBjb2xvclNjYWxlKGNvbG9yVmFsdWUoZCkpKVxuICAgICAgLmF0dHIoJ29wYWNpdHknLCBkID0+XG4gICAgICAgICghc2VsZWN0ZWRDb2xvclZhbHVlIHx8IHNlbGVjdGVkQ29sb3JWYWx1ZSA9PT0gY29sb3JWYWx1ZShkKSlcbiAgICAgICAgICA/IDFcbiAgICAgICAgICA6IDAuMVxuICAgICAgKVxuICAgICAgLmNsYXNzZWQoJ2hpZ2hsaWdodGVkJywgZCA9PlxuICAgICAgICBzZWxlY3RlZENvbG9yVmFsdWUgJiYgc2VsZWN0ZWRDb2xvclZhbHVlID09PSBjb2xvclZhbHVlKGQpXG4gICAgICApXG4gIFxuICBjb3VudHJ5UGF0aHNFbnRlci5hcHBlbmQoJ3RpdGxlJylcbiAgICAgIC50ZXh0KGQgPT4gZC5wcm9wZXJ0aWVzLm5hbWUgKyAnOiAnICsgY29sb3JWYWx1ZShkKSk7XG59OyIsImltcG9ydCB7XG4gIHNlbGVjdCxcbiAgc2NhbGVPcmRpbmFsLFxuICBzY2hlbWVTcGVjdHJhbFxufSBmcm9tICdkMyc7XG5pbXBvcnQgeyBsb2FkQW5kUHJvY2Vzc0RhdGEgfSBmcm9tICcuL2xvYWRBbmRQcm9jZXNzRGF0YSc7XG5pbXBvcnQgeyBjb2xvckxlZ2VuZCB9IGZyb20gJy4vY29sb3JMZWdlbmQnO1xuaW1wb3J0IHsgY2hvcm9wbGV0aE1hcCB9IGZyb20gJy4vY2hvcm9wbGV0aE1hcCc7XG5cbmNvbnN0IHN2ZyA9IHNlbGVjdCgnc3ZnJyk7XG5jb25zdCBjaG9yb3BsZXRoTWFwRyA9IHN2Zy5hcHBlbmQoJ2cnKTtcbmNvbnN0IGNvbG9yTGVnZW5kRyA9IHN2Zy5hcHBlbmQoJ2cnKVxuICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCBgdHJhbnNsYXRlKDQwLDMxMClgKTtcblxuY29uc3QgY29sb3JTY2FsZSA9IHNjYWxlT3JkaW5hbCgpO1xuXG4vLyBjb25zdCBjb2xvclZhbHVlID0gZCA9PiBkLnByb3BlcnRpZXMuaW5jb21lX2dycDtcbmNvbnN0IGNvbG9yVmFsdWUgPSBkID0+IGQucHJvcGVydGllcy5lY29ub215O1xuXG5sZXQgc2VsZWN0ZWRDb2xvclZhbHVlO1xubGV0IGZlYXR1cmVzO1xuXG5jb25zdCBvbkNsaWNrID0gZCA9PiB7XG4gIHNlbGVjdGVkQ29sb3JWYWx1ZSA9IGQ7XG4gIHJlbmRlcigpO1xufTtcblxubG9hZEFuZFByb2Nlc3NEYXRhKCkudGhlbihjb3VudHJpZXMgPT4ge1xuICBmZWF0dXJlcyA9IGNvdW50cmllcy5mZWF0dXJlcztcbiAgcmVuZGVyKCk7XG59KTtcblxuY29uc3QgcmVuZGVyID0gKCkgPT4ge1xuICBjb2xvclNjYWxlXG4gICAgLmRvbWFpbihmZWF0dXJlcy5tYXAoY29sb3JWYWx1ZSkpXG4gICAgLmRvbWFpbihjb2xvclNjYWxlLmRvbWFpbigpLnNvcnQoKS5yZXZlcnNlKCkpXG4gICAgLnJhbmdlKHNjaGVtZVNwZWN0cmFsW2NvbG9yU2NhbGUuZG9tYWluKCkubGVuZ3RoXSk7XG4gIFxuICBjb2xvckxlZ2VuZEcuY2FsbChjb2xvckxlZ2VuZCwge1xuICAgIGNvbG9yU2NhbGUsXG4gICAgY2lyY2xlUmFkaXVzOiA4LFxuICAgIHNwYWNpbmc6IDIwLFxuICAgIHRleHRPZmZzZXQ6IDEyLFxuICAgIGJhY2tncm91bmRSZWN0V2lkdGg6IDIzNSxcbiAgICBvbkNsaWNrLFxuICAgIHNlbGVjdGVkQ29sb3JWYWx1ZVxuICB9KTtcbiAgXG4gIGNob3JvcGxldGhNYXBHLmNhbGwoY2hvcm9wbGV0aE1hcCwge1xuICAgIGZlYXR1cmVzLFxuICAgIGNvbG9yU2NhbGUsXG4gICAgY29sb3JWYWx1ZSxcbiAgICBzZWxlY3RlZENvbG9yVmFsdWVcbiAgfSk7XG59OyJdLCJuYW1lcyI6WyJ0c3YiLCJqc29uIiwiZmVhdHVyZSIsImdlb05hdHVyYWxFYXJ0aDEiLCJnZW9QYXRoIiwiem9vbSIsImV2ZW50Iiwic2VsZWN0Iiwic2NhbGVPcmRpbmFsIiwic2NoZW1lU3BlY3RyYWwiXSwibWFwcGluZ3MiOiI7OztFQUVPLE1BQU0sa0JBQWtCLEdBQUc7SUFDaEMsT0FBTztPQUNKLEdBQUcsQ0FBQztRQUNIQSxNQUFHLENBQUMsbURBQW1ELENBQUM7UUFDeERD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